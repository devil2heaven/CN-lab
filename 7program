#server code

import socket
import os

def handle_client(client_socket):
    # Receive the file name from the client
    file_name = client_socket.recv(1024).decode('utf-8')
    print(f"Request for file: {file_name}")
    
    # Check if the file exists
    if os.path.isfile(file_name):
        # Send the file contents to the client
        with open(file_name, 'rb') as file:
            file_data = file.read()
            client_socket.sendall(file_data)
    else:
        # If the file doesn't exist, send an error message
        error_message = "Error: File not found."
        client_socket.sendall(error_message.encode('utf-8'))
    
    client_socket.close()

def start_server(host='127.0.0.1', port=65432):
    # Create a TCP/IP socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)  # Listen for incoming connections
    print(f"Server started on {host}:{port}")
    
    while True:
        # Accept a connection from the client
        client_socket, client_address = server_socket.accept()
        print(f"Connection from {client_address}")
        
        # Handle the client's request
        handle_client(client_socket)

if __name__ == "__main__":
    start_server()


#clientcode

import socket 
def request_file(file_name, host='127.0.0.1', port=65432):
 # Create a TCP/IP socket
      client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
# Connect to the server 
     client_socket.connect((host, port))
 # Send the file name to the server
     client_socket.sendall(file_name.encode('utf-8')) 
# Receive the response (file data or error message)
     data = client_socket.recv(1024) 
     if data: 
# Check if we received an error message
       if data.decode('utf-8') == "Error: File not found.": 
print("File not found on server.") 
       else: 
# Assuming the server sent file data, display the contents 
          print("File contents received:") 
          print(data.decode('utf-8')) 
# Close the socket 
client_socket.close() 

if __name__ == "__main__":
 file_name = input("Enter the file name to request: ")
 request_file(file_name)
