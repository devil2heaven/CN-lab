class Graph:
	def __init__(self, vertices):
		self.V = vertices # No. of vertices
		self.graph = []
	def addEdge(self, u, v, w):  # function to add an edge to graph
		self.graph.append([u, v, w])
	def printArr(self, dist):      # utility function used to print the solution
		print("Vertex Distance from Source")
		for i in range(self.V):
			print("{0}\t\t{1}".format(i, dist[i]))
# The main function that finds shortest distances from src to all other vertices using 
#Bellman-Ford algorithm. The function also detects negative weight cycle
	def BellmanFord(self, src):
		# Step 1: Initialize distances from src to all other vertices  as INFINITE
		dist = [float("Inf")] * self.V
		dist[src] = 0
# Step 2: Relax all edges |V| - 1 times. A simple shortest
# path from src to any other vertex can have at-most |V| - 1  edges
		for _ in range(self.V-1):
# Update dist value and parent index of the adjacent vertices of  the picked vertex. 
#Consider only those vertices which are still in  queue
			for u, v, w in self.graph:
				if dist[u] != float("Inf") and dist[u] + w < dist[v]:
						dist[v] = dist[u] + w

		for u, v, w in self.graph:
				if dist[u] != float("Inf") and dist[u] + w < dist[v]:
						print("Graph contains negative weight cycle")
						return
		# print all distance
		self.printArr(dist)
n = int(input("Enter number of vertices :"))
g = Graph(n)
m = int(input("Enter number of edges :"))
#print("Enter the edge endpoints and weights of the graph ")
for i in range(1,m+1):    
    print("enter edge ",i," details")
    u = int(input("Enter starting endpoint of edge "))
    v = int(input("Enter endpoint of edge :"))
    w = int(input("Enter weight of edge :"))
    g.addEdge(u, v, w)
s = int(input("Enter the source vertex :"))
# Print the solution
g.BellmanFord(s)
